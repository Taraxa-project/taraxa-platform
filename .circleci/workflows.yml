version: 2.1

orbs:
  docker: circleci/docker@1.7.0
  helm-release: taraxa/helm-release@0.1.1

parameters:
  ui-package-modified:
    type: boolean
    default: false
  run-community-site-service-workflow:
    type: boolean
    default: false
  run-node-status-service-workflow:
    type: boolean
    default: false
  run-delegation-service-workflow:
    type: boolean
    default: false
  run-claim-backend-service-workflow:
    type: boolean
    default: false
  build-faucet-workflow:
    type: boolean
    default: false
  build-faucet-helm-chart-workflow:
    type: boolean
    default: false
  build-explorer-workflow:
    type: boolean
    default: false
  build-explorer-helm-chart-workflow:
    type: boolean
    default: false
  build-explorer-indexer-workflow:
    type: boolean
    default: false
  build-explorer-indexer-helm-chart-workflow:
    type: boolean
    default: false
  build-explorer-api-workflow:
    type: boolean
    default: false
  build-explorer-api-helm-chart-workflow:
    type: boolean
    default: false

aliases:
  - &config
    docker:
      - image: alpine:3.14
  - &step_setup_remote_docker
    setup_remote_docker:
      version: 19.03.14
      docker_layer_caching: true
  - &step_install_deps
    run:
      name: Install dependencies
      shell: /bin/sh -eo pipefail
      command: |
        apk add --update openssl openssh-client sudo git bash curl docker-cli
  - &step_install_deploy_deps
    run:
      name: Install deploy dependencies
      shell: /bin/sh -eo pipefail
      command: |
        mkdir -p $HOME/.kube
        echo -n "${KUBE_CONFIG}" | base64 -d > $HOME/.kube/config
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo mv kubectl /usr/local/bin 
        sudo chmod +x /usr/local/bin/kubectl
  - &step_prepare_environment
    run:
      name: Prepare Environment
      shell: /bin/bash -eo pipefail
      command: |
        if [ "${CIRCLE_BRANCH}" == "develop" ]; then
          export ENV=stage
          echo 'export ENV=stage' >> $BASH_ENV
        elif [ "${CIRCLE_BRANCH}" == "main" ]; then
          export ENV=prod
          echo 'export ENV=prod' >> $BASH_ENV
        else
          echo 'Unknown branch' >&2
          exit 1
        fi
        echo "export GCP_REGISTRY=gcr.io/${GOOGLE_PROJECT_ID}" >> $BASH_ENV
        echo "export VERSION=$(git rev-parse --short HEAD)" >> $BASH_ENV
        echo "export DOCKER_BRANCH_TAG=$(echo $CIRCLE_BRANCH | tr "[:upper:]" "[:lower:]" | sed 's/[^a-zA-Z0-9_-]/-/g')" >> $BASH_ENV
        echo "export START_TIME=$(date +%Y%m%d-%Hh%Mm%Ss)" >> $BASH_ENV
        echo "export TIMESTAMP=$(date +%s)" >> $BASH_ENV
jobs:
  build-community-site:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build --build-arg NODE_ENV=${ENV} -t taraxa-community-frontend:${VERSION} -f services/community-site/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa-community-frontend:${VERSION} taraxa/taraxa-community-frontend:${VERSION}
              docker tag taraxa-community-frontend:${VERSION} taraxa/taraxa-community-frontend:latest
              docker push taraxa/taraxa-community-frontend:${VERSION}
              docker push taraxa/taraxa-community-frontend:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa-community-frontend:${VERSION} ${GCP_REGISTRY}/taraxa-community-frontend-develop:${VERSION}
              docker tag taraxa-community-frontend:${VERSION} ${GCP_REGISTRY}/taraxa-community-frontend-develop:latest
              docker push ${GCP_REGISTRY}/taraxa-community-frontend-develop:${VERSION}
              docker push ${GCP_REGISTRY}/taraxa-community-frontend-develop:latest
            fi
  deploy-community-site:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_install_deploy_deps
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              export NS=taraxa-community-prod
              export HELM_NAME=taraxa-community
              export HELM_CONFIG=prod.values.yaml
            else
              export NS=taraxa-community-qa
              export HELM_NAME=qa-taraxa-community-site
              export HELM_CONFIG=qa.values.yaml
            fi

            helm upgrade -i ${HELM_NAME} services/community-site/charts/community-site/ \
              --namespace ${NS} \
              -f services/community-site/charts/community-site/values.yaml \
              -f services/community-site/charts/${HELM_CONFIG} \
              --set frontend.image.tag=${VERSION}
  build-node-status:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/taraxa-node-status:${VERSION} -f services/node-status/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

            docker tag taraxa/taraxa-node-status:${VERSION} taraxa/taraxa-node-status:latest

            docker push taraxa/taraxa-node-status:${VERSION}
            docker push taraxa/taraxa-node-status:latest
  build-delegation:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/delegation:${VERSION} -f services/delegation/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa/delegation:${VERSION} taraxa/delegation:latest
              docker push taraxa/delegation:${VERSION}
              docker push taraxa/delegation:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa/delegation:${VERSION} ${GCP_REGISTRY}/taraxa/delegation-develop:${VERSION}
              docker tag taraxa/delegation:${VERSION} ${GCP_REGISTRY}/taraxa/delegation-develop:latest
              docker push ${GCP_REGISTRY}/taraxa/delegation-develop:${VERSION}
              docker push ${GCP_REGISTRY}/taraxa/delegation-develop:latest
            fi
  deploy-delegation:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_install_deploy_deps
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              export NS=taraxa-community-prod
              export HELM_NAME=community-delegation
              export HELM_CONFIG=prod.values.yaml
            else
              export NS=taraxa-community-qa
              export HELM_NAME=qa-community-delegation
              export HELM_CONFIG=qa.values.yaml
            fi

            helm upgrade -i ${HELM_NAME} services/delegation/charts/community-delegation/ \
              --namespace ${NS} \
              -f services/delegation/charts/community-delegation/values.yaml \
              -f services/delegation/charts/${HELM_CONFIG} \
              --set image.tag=${VERSION}
  build-claim-backend:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/claim-backend:${VERSION} -f services/claim-backend/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa/claim-backend:${VERSION} taraxa/claim-backend:latest
              docker push taraxa/claim-backend:${VERSION}
              docker push taraxa/claim-backend:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa/claim-backend:${VERSION} ${GCP_REGISTRY}/taraxa/claim-backend-develop:${VERSION}
              docker tag taraxa/claim-backend:${VERSION} ${GCP_REGISTRY}/taraxa/claim-backend-develop:latest
              docker push ${GCP_REGISTRY}/taraxa/claim-backend-develop:${VERSION}
              docker push ${GCP_REGISTRY}/taraxa/claim-backend-develop:latest
            fi
  deploy-claim-backend:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_install_deploy_deps
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              export NS=taraxa-community-prod
              export HELM_NAME=community-claim-backend
              export HELM_CONFIG=prod.values.yaml
            else
              export NS=taraxa-community-qa
              export HELM_NAME=qa-community-claim-backend
              export HELM_CONFIG=qa.values.yaml
            fi

            helm upgrade -i ${HELM_NAME} services/claim-backend/charts/claim-backend/ \
              --namespace ${NS} \
              -f services/claim-backend/charts/claim-backend/values.yaml \
              -f services/claim-backend/charts/${HELM_CONFIG} \
              --set image.tag=${VERSION}
  build-faucet:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/faucet:${VERSION} -f services/faucet/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa/faucet:${VERSION} taraxa/faucet:latest
              docker push taraxa/faucet:${VERSION}
              docker push taraxa/faucet:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa/faucet:${VERSION} ${GCP_REGISTRY}/taraxa/faucet-develop:${CIRCLE_SHA1}
              docker tag taraxa/faucet:${VERSION} ${GCP_REGISTRY}/taraxa/faucet-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker tag taraxa/faucet:${VERSION} ${GCP_REGISTRY}/taraxa/faucet-develop:${START_TIME}
              docker tag taraxa/faucet:${VERSION} ${GCP_REGISTRY}/taraxa/faucet-develop:${START_TIME}-${CIRCLE_SHA1}
              docker tag taraxa/faucet:${VERSION} ${GCP_REGISTRY}/taraxa/faucet-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker tag taraxa/faucet:${VERSION} ${GCP_REGISTRY}/taraxa/faucet-develop:latest

              docker push ${GCP_REGISTRY}/taraxa/faucet-develop:${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/faucet-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker push ${GCP_REGISTRY}/taraxa/faucet-develop:${START_TIME}
              docker push ${GCP_REGISTRY}/taraxa/faucet-develop:${START_TIME}-${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/faucet-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker push ${GCP_REGISTRY}/taraxa/faucet-develop:latest

            fi
  build-explorer:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/explorer-frontend:${VERSION} -f services/explorer/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa/explorer-frontend:${VERSION} taraxa/explorer-frontend:latest
              docker push taraxa/explorer-frontend:${VERSION}
              docker push taraxa/explorer-frontend:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa/explorer-frontend:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${CIRCLE_SHA1}
              docker tag taraxa/explorer-frontend:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker tag taraxa/explorer-frontend:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${START_TIME}
              docker tag taraxa/explorer-frontend:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${START_TIME}-${CIRCLE_SHA1}
              docker tag taraxa/explorer-frontend:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker tag taraxa/explorer-frontend:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:latest

              docker push ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker push ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${START_TIME}
              docker push ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${START_TIME}-${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker push ${GCP_REGISTRY}/taraxa/explorer-frontend-develop:latest
            fi
  build-explorer-indexer:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/explorer-indexer:${VERSION} -f services/explorer-indexer/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa/explorer-indexer:${VERSION} taraxa/explorer-indexer:latest
              docker push taraxa/explorer-indexer:${VERSION}
              docker push taraxa/explorer-indexer:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa/explorer-indexer:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${CIRCLE_SHA1}
              docker tag taraxa/explorer-indexer:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker tag taraxa/explorer-indexer:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${START_TIME}
              docker tag taraxa/explorer-indexer:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${START_TIME}-${CIRCLE_SHA1}
              docker tag taraxa/explorer-indexer:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker tag taraxa/explorer-indexer:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:latest

              docker push ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker push ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${START_TIME}
              docker push ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${START_TIME}-${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker push ${GCP_REGISTRY}/taraxa/explorer-indexer-develop:latest
            fi
  build-explorer-api:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build -t taraxa/explorer-api:${VERSION} -f services/explorer-api/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag taraxa/explorer-api:${VERSION} taraxa/explorer-api:latest
              docker push taraxa/explorer-api:${VERSION}
              docker push taraxa/explorer-api:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag taraxa/explorer-api:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-api-develop:${CIRCLE_SHA1}
              docker tag taraxa/explorer-api:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-api-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker tag taraxa/explorer-api:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-api-develop:${START_TIME}
              docker tag taraxa/explorer-api:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-api-develop:${START_TIME}-${CIRCLE_SHA1}
              docker tag taraxa/explorer-api:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-api-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker tag taraxa/explorer-api:${VERSION} ${GCP_REGISTRY}/taraxa/explorer-api-develop:latest

              docker push ${GCP_REGISTRY}/taraxa/explorer-api-develop:${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/explorer-api-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_BUILD_NUM}
              docker push ${GCP_REGISTRY}/taraxa/explorer-api-develop:${START_TIME}
              docker push ${GCP_REGISTRY}/taraxa/explorer-api-develop:${START_TIME}-${CIRCLE_SHA1}
              docker push ${GCP_REGISTRY}/taraxa/explorer-api-develop:${DOCKER_BRANCH_TAG}-${CIRCLE_SHA1:0:7}-${TIMESTAMP}
              docker push ${GCP_REGISTRY}/taraxa/explorer-api-develop:latest
            fi
workflows:
  community-site:
    when:
      or:
        - << pipeline.parameters.run-community-site-service-workflow >>
        - << pipeline.parameters.ui-package-modified >>
    jobs:
      - build-community-site:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
      - deploy-community-site:
          requires:
            - build-community-site
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - K8S
  node-status:
    when:
      or:
        - << pipeline.parameters.run-node-status-service-workflow >>
        - << pipeline.parameters.ui-package-modified >>
    jobs:
      - build-node-status:
          filters:
            branches:
              only:
                - main
          context:
            - TARAXA
            - DOCKERHUB
  delegation:
    when:
      or:
        - << pipeline.parameters.run-delegation-service-workflow >>
    jobs:
      - build-delegation:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
      - deploy-delegation:
          requires:
            - build-delegation
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - K8S
  claim-backend:
    when:
      or:
        - << pipeline.parameters.run-claim-backend-service-workflow >>
    jobs:
      - build-claim-backend:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
      - deploy-claim-backend:
          requires:
            - build-claim-backend
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - K8S
  faucet:
    when:
      and:
        - << pipeline.parameters.build-faucet-workflow >>
    jobs:
      - build-faucet:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
  faucet-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-faucet-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          develop: true
          charts-dir: services/faucet/charts
          chart-name: faucet
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - develop
  faucet-release-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-faucet-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          charts-dir: services/faucet/charts
          chart-name: faucet
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - main
  explorer:
    when:
      and:
        - << pipeline.parameters.build-explorer-workflow >>
    jobs:
      - build-explorer:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
  explorer-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-explorer-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          develop: true
          charts-dir: services/explorer/charts
          chart-name: explorer-frontend
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - develop
  explorer-release-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-explorer-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          charts-dir: services/explorer/charts
          chart-name: explorer-frontend
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - main
  explorer-indexer:
    when:
      and:
        - << pipeline.parameters.build-explorer-indexer-workflow >>
    jobs:
      - build-explorer-indexer:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
  explorer-indexer-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-explorer-indexer-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          develop: true
          charts-dir: services/explorer-indexer/charts
          chart-name: explorer-indexer
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - develop
  explorer-indexer-release-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-explorer-indexer-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          charts-dir: services/explorer-indexer/charts
          chart-name: explorer-indexer
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - main
  explorer-api:
    when:
      and:
        - << pipeline.parameters.build-explorer-api-workflow >>
    jobs:
      - build-explorer-api:
          filters:
            branches:
              only:
                - main
                - develop
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
  explorer-api-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-explorer-api-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          develop: true
          charts-dir: services/explorer-api/charts
          chart-name: explorer-api
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - develop
  explorer-api-release-helm-chart:
    when:
      or:
        - << pipeline.parameters.build-explorer-api-helm-chart-workflow >>
    jobs:
      - helm-release/chart-publish:
          charts-dir: services/explorer-api/charts
          chart-name: explorer-api
          chartmuseum-url: https://charts.gcp.taraxa.io
          chartmuseum-username: HELM_REPO_USERNAME
          chartmuseum-password: HELM_REPO_PASSWORD
          context:
            - CHARTSREPO
          filters:
            branches:
              only:
                - main